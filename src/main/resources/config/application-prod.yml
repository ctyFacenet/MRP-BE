# ===================================================================
# Spring Boot configuration for the "prod" profile.
#
# This configuration overrides the application.yml file.
#
# More information on profiles: https://www.jhipster.tech/profiles/
# More information on configuration properties: https://www.jhipster.tech/common-application-properties/
# ===================================================================

# ===================================================================
# Standard Spring Boot properties.
# Full reference is available at:
# http://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html
# ===================================================================

logging:
  level:
    ROOT: INFO
    tech.jhipster: INFO
    com.facenet.mrp: INFO

management:
  metrics:
    export:
      prometheus:
        enabled: false

spring:
  kafka:
    producer:
      bootstrap-servers: 192.168.68.76:9092
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
  devtools:
    restart:
      enabled: false
    livereload:
      enabled: false
  datasource:
    primary:
      type: com.zaxxer.hikari.HikariDataSource
      jdbc-url: jdbc:mariadb://192.168.68.96:3307/material_requirements_planning?useLegacyDatetimeCode=false&serverTimezone=UTC
      username: root
      password: Facenet@123
      hikari:
        poolName: Hikari
        auto-commit: false
        max-lifetime: 300000
        data-source-properties:
          cachePrepStmts: true
          prepStmtCacheSize: 250
          prepStmtCacheSqlLimit: 2048
          useServerPrepStmts: true
    sap:
      type: com.zaxxer.hikari.HikariDataSource
      jdbc-url: jdbc:sqlserver://192.168.68.3;databaseName=Test-connectPana;integratedSecurity=true;encrypt=true;
      username: read
      password: 2022@mesrd
  jpa:
    properties:
      enable_lazy_load_no_trans: true
  # Replace by 'prod, faker' to add the faker context and have sample data loaded in production
  liquibase:
    contexts: prod
    enabled: off
  thymeleaf:
    cache: true

# ===================================================================
# To enable TLS in production, generate a certificate using:
# keytool -genkey -alias mrpservice -storetype PKCS12 -keyalg RSA -keysize 2048 -keystore keystore.p12 -validity 3650
#
# You can also use Let's Encrypt:
# See details in topic "Create a Java Keystore (.JKS) from Let's Encrypt Certificates" on https://maximilian-boehm.com/en-gb/blog
#
# Then, modify the server.ssl properties so your "server" configuration looks like:
#


server:
  port: 8312
  shutdown: graceful # see https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-graceful-shutdown
  compression:
    enabled: true
    mime-types: text/html,text/xml,text/plain,text/css,application/javascript,application/json,image/svg+xml
    min-response-size: 1024

# ===================================================================
# JHipster specific properties
#
# Full reference is available at: https://www.jhipster.tech/common-application-properties/
# ===================================================================

jhipster:
  http:
    cache: # Used by the CachingHttpHeadersFilter
      timeToLiveInDays: 1461
  cors:
    # Allow Ionic for JHipster by default (* no longer allowed in Spring Boot 2.4+)
    allowed-origins: 'http://192.168.68.87:4200,http://192.168.68.87:4000,http://192.168.68.96:4200'
    # Enable CORS when running in GitHub Codespaces
    allowed-methods: '*'
    allowed-headers: '*'
    exposed-headers: 'Authorization,Link,X-Total-Count,X-${jhipster.clientApp.name}-alert,X-${jhipster.clientApp.name}-error,X-${jhipster.clientApp.name}-params'
    allow-credentials: true
    max-age: 1800
  logging:
    use-json-format: false # By default, logs are not in Json format
    logstash: # Forward logs to logstash over a socket, used by LoggingConfiguration
      enabled: false
      host: localhost
      port: 5000
      queue-size: 512
# ===================================================================
# Application specific properties
# Add your own application properties here, see the ApplicationProperties class
# to have type-safe configuration, like in the JHipsterProperties above
#
# More documentation is available at:
# https://www.jhipster.tech/common-application-properties/
# ===================================================================


keycloak_planning:
  baseUrl: http://192.168.68.90:8080/auth
  realm: QLSX
  clientId: planning_backend
  clientSecret: AMmEOEbqtPIskkErXNx94vt8c0bvF7Jd
  username: admin
  password: 123321
# application: config planning prod
planning:
  api:
    syncPo: http://192.168.68.87:8080/services/api/order/sync-product-order-mrp
    getWO: http://192.168.68.87:3000/rest/entities/PlanningWorkOrder/search?
    getListWo: http://192.168.68.87:8080/services/api/workorder/find-by-ProductOrder/
    createWo: http://192.168.68.87:8080/services/api/workorder/createWoMrp
